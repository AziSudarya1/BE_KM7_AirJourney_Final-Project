generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or any database you are using
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(uuid(7)) @db.Uuid
  name        String
  image       String?
  email       String  @unique
  role        Role
  verified    Boolean @default(false)
  password    String
  phoneNumber String  @unique @map("phone_number")

  notification  Notification[]
  otp           Otp[]
  passwordReset PasswordReset[]
  transaction   Transaction[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("users")
}

model Notification {
  id      String  @id @default(uuid(7)) @db.Uuid
  title   String
  message String
  isRead  Boolean @default(false) @map("is_read")

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("notification")
}

model Otp {
  id        String   @id @default(uuid(7)) @db.Uuid
  otp       String
  used      Boolean  @default(false)
  expiredAt DateTime @map("expired_at") @db.Timestamptz()

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("otp")
}

model PasswordReset {
  id        String   @id @default(uuid(7)) @db.Uuid
  token     String   @db.Uuid
  used      Boolean  @default(false)
  expiredAt DateTime @map("expired_at") @db.Timestamptz()

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("password_reset")
}

model Transaction {
  id              String            @id @default(uuid(7)) @db.Uuid
  transactionCode String            @map("transaction_code")
  amount          Int
  status          TransactionStatus

  userId            String  @map("user_id") @db.Uuid
  departureFlightId String  @map("departure_flight_id") @db.Uuid
  returnFlightId    String? @map("return_flight_id") @db.Uuid
  passengerId       String? @map("passenger_id") @db.Uuid

  user            User        @relation(fields: [userId], references: [id])
  departureFlight Flight      @relation("DepartureFlight", fields: [departureFlightId], references: [id])
  returnFlight    Flight?     @relation("ReturnFlight", fields: [returnFlightId], references: [id])
  payment         Payment?
  Passenger       Passenger[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("transaction")
}

model Passenger {
  id            String   @id @default(uuid(7)) @db.Uuid
  transactionId String   @map("transaction_id") @db.Uuid
  title         String
  firstName     String   @map("first_name")
  familyName    String   @map("family_name")
  birthday      String
  nationality   String
  nikPaspor     String   @map("nik_paspor")
  nikKtp        String   @map("nik_ktp")
  expiredAt     DateTime @map("expired_at")

  departureSeatId String  @unique @map("departure_seat_id") @db.Uuid
  returnSeatId    String? @unique @map("return_seat_id") @db.Uuid

  transaction   Transaction @relation(fields: [transactionId], references: [id])
  departureSeat Seat        @relation("DepartureSeat", fields: [departureSeatId], references: [id])
  returnSeat    Seat?       @relation("ReturnSeat", fields: [returnSeatId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("passenger")
}

model Flight {
  id            String   @id @default(uuid(7)) @db.Uuid
  departureDate DateTime @map("departure_date")
  departureTime DateTime @map("departure_time")
  arrivalDate   DateTime @map("arrival_date")
  arrivalTime   DateTime @map("arrival_time")
  duration      String
  price         Int
  class         Class
  description   String?

  airlineId     String @map("airline_id") @db.Uuid
  airportIdFrom String @map("airport_id_from") @db.Uuid
  airportIdTo   String @map("airport_id_to") @db.Uuid
  aeroplaneId   String @map("aeroplane_id") @db.Uuid

  aeroplane            Aeroplane     @relation(fields: [aeroplaneId], references: [id])
  airline              Airline       @relation(fields: [airlineId], references: [id])
  airportFrom          Airport       @relation("AirportFrom", fields: [airportIdFrom], references: [id])
  airportTo            Airport       @relation("AirportTo", fields: [airportIdTo], references: [id])
  departureTransaction Transaction[] @relation("DepartureFlight")
  returnTransaction    Transaction[] @relation("ReturnFlight")
  seat                 Seat[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("flight")
}

model Airline {
  id    String  @id @default(uuid(7)) @db.Uuid
  code  String
  name  String
  image String?

  flight Flight[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("airline")
}

model Airport {
  id        String    @id @default(uuid(7)) @db.Uuid
  code      String    @unique
  name      String    @unique
  continent Continent
  city      String
  country   String

  flightFrom Flight[] @relation("AirportFrom")
  flightTo   Flight[] @relation("AirportTo")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("airport")
}

model Payment {
  id              String        @id @default(uuid(7)) @db.Uuid
  status          PaymentStatus
  method          PaymentMethod
  snapToken       String        @map("snap_token")
  snapRedirectUrl String        @map("snap_redirect_url")
  paymentMethod   String        @map("payment_method")

  transactionId String      @unique @map("transaction_id") @db.Uuid
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("payment")
}

model Aeroplane {
  id        String   @id @default(uuid(7)) @db.Uuid
  code      String
  type      String
  maxRow    Int      @map("max_row")
  maxColumn Int      @map("max_column")
  seats     Seat[]
  flight    Flight[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("aeroplane")
}

model Seat {
  id     String     @id @default(uuid(7)) @db.Uuid
  status SeatStatus
  number Int
  row    Int

  aeroplaneId String @map("aeroplane_id") @db.Uuid
  flightId    String @map("flight_id") @db.Uuid

  aeroplane          Aeroplane  @relation(fields: [aeroplaneId], references: [id])
  flight             Flight     @relation(fields: [flightId], references: [id])
  passengerDeparture Passenger? @relation("DepartureSeat")
  passengerReturn    Passenger? @relation("ReturnSeat")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@map("seat")
}

enum Role {
  ADMIN
  USER
}

enum TransactionStatus {
  UNPAID
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  CREDIT_CARD
  DEBIT_CARD
  GOPAY
  OVO
  DANA
  LINK_AJA
  SHOPEE_PAY
  QRIS
  CASH
}

enum PaymentStatus {
  UNPAID
  PENDING
  SUCCESS
  CANCELLED
}

enum Class {
  ECONOMY
  PREMIUM_ECONOMY
  BUSINESS
  FIRST_CLASS
}

enum SeatStatus {
  AVAILABLE
  BOOKED
  PENDING
}

enum Continent {
  ASIA
  EUROPE
  AFRICA
  NORTH_AMERICA
  SOUTH_AMERICA
  AUSTRALIA
  ANTARCTICA
}
